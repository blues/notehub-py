# coding: utf-8

"""
Notehub API

The OpenAPI definition for the Notehub.io API.

The version of the OpenAPI document: 1.2.0
Contact: engineering@blues.io
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, SecretStr, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from notehub_py.models.filter import Filter
from typing import Optional, Set
from typing_extensions import Self


class TwilioRoute(BaseModel):
    """
    TwilioRoute
    """  # noqa: E501

    account_sid: Optional[StrictStr] = None
    auth_token: Optional[SecretStr] = None
    filter: Optional[Filter] = None
    fleets: Optional[List[StrictStr]] = None
    var_from: Optional[StrictStr] = Field(default=None, alias="from")
    message: Optional[StrictStr] = None
    throttle_ms: Optional[StrictInt] = None
    timeout: Optional[StrictInt] = None
    to: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = [
        "account_sid",
        "auth_token",
        "filter",
        "fleets",
        "from",
        "message",
        "throttle_ms",
        "timeout",
        "to",
    ]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of TwilioRoute from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of filter
        if self.filter:
            _dict["filter"] = self.filter.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of TwilioRoute from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "account_sid": obj.get("account_sid"),
                "auth_token": obj.get("auth_token"),
                "filter": (
                    Filter.from_dict(obj["filter"])
                    if obj.get("filter") is not None
                    else None
                ),
                "fleets": obj.get("fleets"),
                "from": obj.get("from"),
                "message": obj.get("message"),
                "throttle_ms": obj.get("throttle_ms"),
                "timeout": obj.get("timeout"),
                "to": obj.get("to"),
            }
        )
        return _obj
