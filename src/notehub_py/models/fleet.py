# coding: utf-8

"""
Notehub API

The OpenAPI definition for the Notehub.io API.

The version of the OpenAPI document: 1.2.0
Contact: engineering@blues.io
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from notehub_py.models.fleet_connectivity_assurance import FleetConnectivityAssurance
from typing import Optional, Set
from typing_extensions import Self


class Fleet(BaseModel):
    """
    Fleet
    """  # noqa: E501

    connectivity_assurance: Optional[FleetConnectivityAssurance] = None
    created: datetime = Field(description="RFC3339 timestamp in UTC")
    environment_variables: Optional[Dict[str, StrictStr]] = Field(
        default=None,
        description="The environment variables for this device that have been set using the Notehub API or UI.",
    )
    label: StrictStr = Field(description="Fleet label")
    smart_rule: Optional[StrictStr] = Field(
        default=None,
        description="JSONata expression that will be evaluated to determine device membership into this fleet, if the expression evaluates to a 1, the device will be included, if it evaluates to -1 it will be removed, and if it evaluates to 0 or errors it will be left unchanged.",
    )
    uid: StrictStr = Field(description="Fleet UID")
    watchdog_mins: Optional[StrictInt] = Field(
        default=None,
        description="A watchdog timer is used to generate an event every N minutes of inactivity. 0 means no watchdog",
    )
    __properties: ClassVar[List[str]] = [
        "connectivity_assurance",
        "created",
        "environment_variables",
        "label",
        "smart_rule",
        "uid",
        "watchdog_mins",
    ]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Fleet from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of connectivity_assurance
        if self.connectivity_assurance:
            _dict["connectivity_assurance"] = self.connectivity_assurance.to_dict()
        # set to None if connectivity_assurance (nullable) is None
        # and model_fields_set contains the field
        if (
            self.connectivity_assurance is None
            and "connectivity_assurance" in self.model_fields_set
        ):
            _dict["connectivity_assurance"] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Fleet from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "connectivity_assurance": (
                    FleetConnectivityAssurance.from_dict(obj["connectivity_assurance"])
                    if obj.get("connectivity_assurance") is not None
                    else None
                ),
                "created": obj.get("created"),
                "environment_variables": obj.get("environment_variables"),
                "label": obj.get("label"),
                "smart_rule": obj.get("smart_rule"),
                "uid": obj.get("uid"),
                "watchdog_mins": obj.get("watchdog_mins"),
            }
        )
        return _obj
